def dfs(graph, node, visited, traversal_order):
    # Mark the current node as visited
    visited.add(node)
    traversal_order.append(node)

    # Recur for all the neighbors of the current node
    for neighbor in graph[node]:
        if neighbor not in visited:
            dfs(graph, neighbor, visited, traversal_order)

# Example graph (as an adjacency list)
graph = {
    'A': ['B', 'C'],
    'B': ['A', 'D', 'E'],
    'C': ['A', 'F'],
    'D': ['B'],
    'E': ['B', 'F'],
    'F': ['C', 'E']
}

# Take input for the source node
source_node = input("Enter the source node for DFS traversal: ")

# Perform DFS traversal
if source_node in graph:
    visited = set()  # To keep track of visited nodes
    traversal_order = []  # To store the DFS traversal order
    dfs(graph, source_node, visited, traversal_order)

    print("DFS Traversal Order:", traversal_order)
    print("Total Number of Nodes Visited:", len(visited))
else:
    print("The source node is not present in the graph.")
