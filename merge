def merge_sort(arr):
    # Base case: If the array has one or no elements, it's already sorted
    if len(arr) <= 1:
        return arr

    # Divide the array into two halves
    mid = len(arr) // 2
    left_half = arr[:mid]
    right_half = arr[mid:]

    # Recursively sort both halves
    left_sorted = merge_sort(left_half)
    right_sorted = merge_sort(right_half)

    # Merge the two sorted halves
    return merge(left_sorted, right_sorted)

def merge(left, right):
    merged = []
    i = j = 0

    # Compare elements from both halves and add the smaller one to the merged array
    while i < len(left) and j < len(right):
        if left[i] < right[j]:
            merged.append(left[i])
            i += 1
        else:
            merged.append(right[j])
            j += 1

    # Add the remaining elements from the left half (if any)
    while i < len(left):
        merged.append(left[i])
        i += 1

    # Add the remaining elements from the right half (if any)
    while j < len(right):
        merged.append(right[j])
        j += 1

    return merged

# Take input from the user
user_input = input("Enter the elements of the array, separated by spaces: ")
arr = list(map(int, user_input.split()))  # Convert input to a list of integers

print("Original array:", arr)
sorted_arr = merge_sort(arr)
print("Sorted array:", sorted_arr)
