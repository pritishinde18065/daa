import time
import random


class SelectionSort:
    def __init__(self):
        self.comparisons = 0
        self.swaps = 0

    def reset_counters(self):
        self.comparisons = 0
        self.swaps = 0

    # Iterative selection sort
    def iterative_selection_sort(self, arr):
        self.reset_counters()
        n = len(arr)
        for i in range(n):
            min_index = i
            for j in range(i + 1, n):
                self.comparisons += 1
                if arr[j] < arr[min_index]:
                    min_index = j
            if min_index != i:
                self.swaps += 1
                arr[i], arr[min_index] = arr[min_index], arr[i]

    # Recursive selection sort
    def recursive_selection_sort(self, arr, n=None, index=0):
        if n is None:
            n = len(arr)
            self.reset_counters()

        # Base case: If the whole array is sorted
        if index == n:
            return

        # Find the minimum element in the remaining array
        min_index = index
        for j in range(index + 1, n):
            self.comparisons += 1
            if arr[j] < arr[min_index]:
                min_index = j

        # Swap the found minimum element with the current element
        if min_index != index:
            self.swaps += 1
            arr[index], arr[min_index] = arr[min_index], arr[index]

        # Recursively call for the next index
        self.recursive_selection_sort(arr, n, index + 1)


def run_test_case(sorter, input_array, test_name):
    print(f"\nTest Case: {test_name}")
    print(f"Input Array: {input_array}")

    # Iterative selection sort
    iterative_array = input_array[:]
    start_time = time.time()
    sorter.iterative_selection_sort(iterative_array)
    iterative_time = time.time() - start_time
    iterative_comparisons = sorter.comparisons
    iterative_swaps = sorter.swaps

    # Recursive selection sort
    recursive_array = input_array[:]
    start_time = time.time()
    sorter.recursive_selection_sort(recursive_array)
    recursive_time = time.time() - start_time
    recursive_comparisons = sorter.comparisons
    recursive_swaps = sorter.swaps

    # Print results
    print("\nResults:")
    print(f"{'Method':<15}{'Time (s)':<15}{'Comparisons':<15}{'Swaps':<15}")
    print(f"{'Iterative':<15}{iterative_time:<15.5f}{iterative_comparisons:<15}{iterative_swaps:<15}")
    print(f"{'Recursive':<15}{recursive_time:<15.5f}{recursive_comparisons:<15}{recursive_swaps:<15}")


def generate_large_input(size):
    return [random.randint(1, size) for _ in range(size)]


if __name__ == "__main__":
    sorter = SelectionSort()

    # Test cases
    already_sorted = [i for i in range(1, 26)]
    reverse_sorted = [i for i in range(25, 0, -1)]
    random_order = [16, 1, 4, 2, 12, 9, 10, 3, 5, 24, 14, 20, 6, 23, 7, 25, 19, 18, 8, 22, 11, 17, 13, 15, 21]
    nearly_sorted = [24, 25, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 1, 2]
    single_element_end = [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 1]
    large_input = generate_large_input(1000)

    # Run test cases
    run_test_case(sorter, already_sorted, "Already Sorted")
    run_test_case(sorter, reverse_sorted, "Reverse Sorted")
    run_test_case(sorter, random_order, "Random Order")
    run_test_case(sorter, nearly_sorted, "Nearly Sorted")
    run_test_case(sorter, single_element_end, "Single Element at the End")
    run_test_case(sorter, large_input, "Large Input")










def iterative_selection_sort(arr):
    """
    Iterative implementation of the Selection Sort algorithm.

    :param arr: List of elements to be sorted
    :return: None (in-place sorting)
    """
    n = len(arr)
    for i in range(n):
        # Find the minimum element in the unsorted portion of the array
        min_index = i
        for j in range(i + 1, n):
            if arr[j] < arr[min_index]:
                min_index = j
        # Swap the found minimum element with the first element
        if min_index != i:
            arr[i], arr[min_index] = arr[min_index], arr[i]


if __name__ == "__main__":
    # Take input from the user
    user_input = input("Enter elements of the array separated by spaces: ")
    array = list(map(int, user_input.split()))

    print("Original array:", array)

    # Sort the array using iterative selection sort
    iterative_selection_sort(array)

    print("Sorted array:", array)

    
