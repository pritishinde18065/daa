def quick_sort(arr):
    # Base case: If the array has one or no elements, it's already sorted
    if len(arr) <= 1:
        return arr

    # Choose the pivot (we choose the last element here)
    pivot = arr[-1]
    left = []   # Elements smaller than the pivot
    right = []  # Elements greater than the pivot
    equal = []  # Elements equal to the pivot

    # Partition the array into left, right, and equal parts
    for num in arr:
        if num < pivot:
            left.append(num)
        elif num > pivot:
            right.append(num)
        else:
            equal.append(num)

    # Recursively sort the left and right parts and concatenate the results
    return quick_sort(left) + equal + quick_sort(right)

# Examples to showcase the sorting function

# 1. Already sorted array
sorted_arr = [1, 2, 3, 4, 5]
print("Original (sorted):", sorted_arr)
print("Sorted:", quick_sort(sorted_arr))

# 2. Unsorted array
unsorted_arr = [3, 1, 4, 5, 2]
print("\nOriginal (unsorted):", unsorted_arr)
print("Sorted:", quick_sort(unsorted_arr))

# 3. Reverse sorted array
reverse_arr = [5, 4, 3, 2, 1]
print("\nOriginal (reverse):", reverse_arr)
print("Sorted:", quick_sort(reverse_arr))

# 4. Array with negative numbers
negative_arr = [-3, -1, -4, -5, -2]
print("\nOriginal (negative):", negative_arr)
print("Sorted:", quick_sort(negative_arr))
