import time
import random


class InsertionSort:
    def __init__(self):
        self.comparisons = 0
        self.swaps = 0

    def reset_counters(self):
        self.comparisons = 0
        self.swaps = 0

    # Iterative Insertion Sort
    def iterative_insertion_sort(self, arr):
        self.reset_counters()
        n = len(arr)
        for i in range(1, n):
            key = arr[i]
            j = i - 1
            while j >= 0 and arr[j] > key:
                self.comparisons += 1
                arr[j + 1] = arr[j]
                j -= 1
                self.swaps += 1
            self.comparisons += 1  # For the last comparison when the condition fails
            arr[j + 1] = key

    # Recursive Insertion Sort
    def recursive_insertion_sort(self, arr, n=None):
        if n is None:
            n = len(arr)
            self.reset_counters()

        # Base case: If the array has one or no elements, it's already sorted
        if n <= 1:
            return

        # Sort the first n-1 elements
        self.recursive_insertion_sort(arr, n - 1)

        # Insert the nth element into the sorted portion
        key = arr[n - 1]
        j = n - 2
        while j >= 0 and arr[j] > key:
            self.comparisons += 1
            arr[j + 1] = arr[j]
            j -= 1
            self.swaps += 1
        self.comparisons += 1  # For the last comparison when the condition fails
        arr[j + 1] = key


def run_test_case(sorter, input_array, test_name):
    print(f"\nTest Case: {test_name}")
    print(f"Input Array: {input_array}")

    # Iterative Insertion Sort
    iterative_array = input_array[:]
    start_time = time.time()
    sorter.iterative_insertion_sort(iterative_array)
    iterative_time = time.time() - start_time
    iterative_comparisons = sorter.comparisons
    iterative_swaps = sorter.swaps

    # Recursive Insertion Sort
    recursive_array = input_array[:]
    start_time = time.time()
    sorter.recursive_insertion_sort(recursive_array)
    recursive_time = time.time() - start_time
    recursive_comparisons = sorter.comparisons
    recursive_swaps = sorter.swaps

    # Print results
    print("\nResults:")
    print(f"{'Method':<15}{'Time (s)':<15}{'Comparisons':<15}{'Swaps':<15}")
    print(f"{'Iterative':<15}{iterative_time:<15.5f}{iterative_comparisons:<15}{iterative_swaps:<15}")
    print(f"{'Recursive':<15}{recursive_time:<15.5f}{recursive_comparisons:<15}{recursive_swaps:<15}")


def generate_large_input(size):
    return [random.randint(1, size) for _ in range(size)]


if __name__ == "__main__":
    sorter = InsertionSort()

    # Test cases
    already_sorted = [i for i in range(1, 26)]
    reverse_sorted = [i for i in range(25, 0, -1)]
    random_order = [16, 1, 4, 2, 12, 9, 10, 3, 5, 24, 14, 20, 6, 23, 7, 25, 19, 18, 8, 22, 11, 17, 13, 15, 21]
    nearly_sorted = [24, 25, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 1, 2]
    single_element_end = [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 1]
    large_input = generate_large_input(1000)

    # Run test cases
    run_test_case(sorter, already_sorted, "Already Sorted")
    run_test_case(sorter, reverse_sorted, "Reverse Sorted")
    run_test_case(sorter, random_order, "Random Order")
    run_test_case(sorter, nearly_sorted, "Nearly Sorted")
    run_test_case(sorter, single_element_end, "Single Element at the End")
    run_test_case(sorter, large_input, "Large Input")








def recursive_insertion_sort(arr, n=None):
    """
    Recursive implementation of the Insertion Sort algorithm.

    :param arr: List of elements to be sorted
    :param n: Length of the array (used for recursion)
    :return: None (in-place sorting)
    """
    if n is None:
        n = len(arr)

    # Base case: If the array has one or no elements, it's already sorted
    if n <= 1:
        return

    # Sort the first n-1 elements
    recursive_insertion_sort(arr, n - 1)

    # Insert the nth element into the sorted portion
    key = arr[n - 1]
    j = n - 2
    while j >= 0 and arr[j] > key:
        arr[j + 1] = arr[j]
        j -= 1
    arr[j + 1] = key


if __name__ == "__main__":
    # Take input from the user
    user_input = input("Enter elements of the array separated by spaces: ")
    array = list(map(int, user_input.split()))

    print("Original array:", array)

    # Sort the array using recursive insertion sort
    recursive_insertion_sort(array)

    print("Sorted array:", array)
